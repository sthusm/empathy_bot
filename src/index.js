const Telegraf = require('telegraf')
const {
  Stage,
  session,
} = Telegraf
const { 
  BOT_TOKEN, 
  EMPATHY_CHAT_ID,
  MONGO_URL,
} = require('./config.js')
const { 
  HELP_COMMAND,
  responseMenu,
  chooseGender,
} = require('./utils/buttons.js')
const bot = new Telegraf(BOT_TOKEN)
const User = require('./db/dao/user_query.js')
const MessageState = require('./db/dao/messageState_query.js')
const mongoose = require('mongoose')
const SceneGenerator = require('./scenes.js')
const sg = new SceneGenerator()

const helpRequest = sg.genHelpRequest
// const helpRequestHandler = sg.helpRequestHandler
//bot.use(Telegraf.log())

const stage = new Stage([helpRequest()])

bot.use(session())
bot.use(stage.middleware())

bot.start(async ctx => {
  if (ctx.message.chat.id !== ctx.from.id) return

  await ctx.reply(HELP_COMMAND, responseMenu('–ù–∞—á–∞—Ç—å', 'reqSceneStart'))
})
bot.command('changeGender', async ctx => {
  if (ctx.message.chat.id !== ctx.from.id) return

  await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –í–∞—à –ø–æ–ª', chooseGender())
})
bot.hears(['üë¶ –ú—É–∂—á–∏–Ω–∞', 'üë© –ñ–µ–Ω—â–∏–Ω–∞'], async ctx => {
  if (ctx.message.chat.id !== ctx.from.id) return

  let gender
  if (ctx.match === 'üë¶ –ú—É–∂—á–∏–Ω–∞') gender = 'Male'
  else gender = 'Female'

  await User.update(ctx.update.message.from.id, { gender })
  await ctx.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!')
})
bot.on('text', async ctx => {
  if (ctx.message.chat.id !== ctx.from.id) return

  await ctx.reply(
    '–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç–æ–≥–æ, –∫–æ–º—É –º–æ–∂–Ω–æ –≤—ã—Å–∫–∞–∑–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', 
    responseMenu('–ù–∞—á–∞—Ç—å', 'reqSceneStart')
  )
})
bot.on('callback_query', async ctx => {
  const buttonValue = ctx.callbackQuery.message.reply_markup.inline_keyboard[0][0]?.callback_data

  // –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞
  if (String(ctx.callbackQuery.message.chat.id) === EMPATHY_CHAT_ID) {
    await ctx.answerCbQuery('–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', true)
    const { username } = ctx.from

    if (!username) {
      await ctx.telegram.sendMessage(
        ctx.from.id,
        '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ –º–æ–≥ —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram –ø–æ–ª–µ username'
      )
      return
    }

    // –≤ buttonValue –ª–µ–∂–∏—Ç id —á–∞—Ç–∞ —é–∑–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å
    await ctx.telegram.sendMessage(
      buttonValue, 
      `@${username} –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`, 
      responseMenu('ü§ù –ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å', `helpReqCancel @${username}`)
    )
  } else if (buttonValue.includes('helpReqCancel')) {
    const ms = await MessageState.find(ctx.callbackQuery.from.id)
    const additionalInfo = buttonValue.replace('helpReqCancel ', '')

    if (!ms.messageId) {
      await ctx.answerCbQuery('–ó–∞–ø—Ä–æ—Å —É–∂–µ –∏ —Ç–∞–∫ –∑–∞–∫—Ä—ã—Ç =)', true)
      return
    } else if (additionalInfo.startsWith('@')) {
      ctx.answerCbQuery(
        `–í—ã –ø—Ä–∏–Ω—è–ª–∏ –æ—Ç–∫–ª–∏–∫ –æ—Ç ${additionalInfo}. –ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É/–µ–π –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.`,
        true
      )
    } else {
      await ctx.answerCbQuery('–ó–∞–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç!', true)
    }

    clearTimeout(ctx.session.reqTimeout)
    await ctx.telegram.sendMessage(
      EMPATHY_CHAT_ID,
      '–ó–∞–∫—Ä—ã—Ç–æ.',
      { reply_to_message_id: Number(ms.messageId) }
    )
    await ctx.telegram.editMessageReplyMarkup(EMPATHY_CHAT_ID, Number(ms.messageId))

    ctx.session.activeRequest = false
    await MessageState.createOrUpdate(ctx.callbackQuery.from.id, { messageId: null })
  } else if (buttonValue === 'reqSceneStart') {
    ctx.answerCbQuery()
    await ctx.scene.enter('helpRequest')
  }
})

async function start() {
  try {
    await mongoose.connect(MONGO_URL, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      useCreateIndex: true,
    })
    bot.launch()
    console.log('The bot was successfully launched')
  } catch (e) {
    console.log('Server Error', e.message)
    process.exit(1)
  }
}

start()
