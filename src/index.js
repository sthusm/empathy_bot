const Telegraf = require('telegraf')
const auth = require('./core/middlewares/auth')
const {
  Stage,
  session,
} = Telegraf
const { 
  BOT_TOKEN,
  EMPATHY_CHAT_ID,
} = require('./config')
const { 
  responseMenu,
  chooseGender,
} = require('./core/utils/buttons')
const { 
  START_PHRASE,
  HELP_PHRASE, 
} = require('./core/utils/phrases')
const { closeRequest } = require('./core/utils/helpers')
const bot = new Telegraf(BOT_TOKEN)
const userQuery = require('./core/query_service/users/users_query')
const requestQuery = require('./core/query_service/requests/requests_query')
const responseQuery = require('./core/query_service/responses/responses_query')
const SceneGenerator = require('./scenes')
const sg = new SceneGenerator()

const helpRequest = sg.genHelpRequest

const stage = new Stage([helpRequest()])

bot.use(session())
bot.use(stage.middleware())
bot.use(auth)

bot.start(async ctx => {
  const telegramId = ctx.from.id
  if (ctx.message.chat.id !== telegramId) return

  const tgUser = await userQuery.find(telegramId)
  if (!tgUser) await userQuery.create({
    telegramId,
    name: ctx.from.first_name,
    surname: ctx.from.last_name,
  })

  await ctx.reply(START_PHRASE, responseMenu('–ù–∞—á–∞—Ç—å', 'reqSceneStart'))
})
bot.help(async ctx => {
  if (ctx.message.chat.id !== ctx.from.id) return

  await ctx.reply(HELP_PHRASE)
})
bot.command('updateProfile', async ctx => {
  if (ctx.message.chat.id !== ctx.from.id) return

  await userQuery.update(ctx.from.id, {
    name: ctx.from.first_name || null,
    surname: ctx.from.last_name || null,
  })

  await ctx.reply('–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!')
})
bot.command('changeGender', async ctx => {
  if (ctx.message.chat.id !== ctx.from.id) return

  await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –í–∞—à –ø–æ–ª', chooseGender())
})
bot.hears(['üë¶ –ú—É–∂—á–∏–Ω–∞', 'üë© –ñ–µ–Ω—â–∏–Ω–∞'], async ctx => {
  if (ctx.message.chat.id !== ctx.from.id) return

  let gender
  if (ctx.match === 'üë¶ –ú—É–∂—á–∏–Ω–∞') gender = 'male'
  else gender = 'female'

  await userQuery.update(ctx.update.message.from.id, { gender })
  await ctx.reply('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!')
})
bot.hears('ban!', async ctx => {
  if (String(ctx.chat.id) !== EMPATHY_CHAT_ID) return
  const user = await ctx.telegram.getChatMember(EMPATHY_CHAT_ID, ctx.from.id)

  if (user.status !== 'creator' || user.status !== 'administrator') return

  const messageId = ctx.message?.reply_to_message?.message_id

  if (messageId) {
    const res = await userQuery.ban(messageId)

    if (res) {
      await ctx.telegram.kickChatMember(EMPATHY_CHAT_ID, Number(res.author_id))
      await ctx.telegram.sendMessage(
        EMPATHY_CHAT_ID,
        '–ê–≤—Ç–æ—Ä—É –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–ø—Ä–µ—â—ë–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –ú–æ—Ç—è –∏ —á–∞—Ç—É –≠–º–ø–∞—Ç–∏–∏.', 
        { reply_to_message_id: Number(messageId) }
      )

      if (res.status === 'active') {
        await ctx.telegram.editMessageReplyMarkup(EMPATHY_CHAT_ID, Number(messageId))
      }
    }
  }
})
bot.hears('unban!', async ctx => {
  if (String(ctx.chat.id) !== EMPATHY_CHAT_ID) return

  const user = await ctx.telegram.getChatMember(EMPATHY_CHAT_ID, ctx.from.id)

  if (user.status !== 'creator' || user.status !== 'administrator') return

  const messageId = ctx.message?.reply_to_message?.message_id

  if (messageId) {
    const res = await userQuery.unban(messageId)

    if (res) {
      await ctx.telegram.unbanChatMember(EMPATHY_CHAT_ID, Number(res.author_id))
      await ctx.telegram.sendMessage(
        EMPATHY_CHAT_ID,
        '–ê–≤—Ç–æ—Ä—É –∑–∞–ø—Ä–æ—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –ú–æ—Ç—è –∏ —á–∞—Ç—É –≠–º–ø–∞—Ç–∏–∏.', 
        { reply_to_message_id: Number(messageId) }
      )
    }
  }
})
bot.on('text', async ctx => {
  if (ctx.message.chat.id !== ctx.from.id) return
  
  const activeReq = await requestQuery.findUserActiveRequest(ctx.from.id)

  if (activeReq) {
    await ctx.scene.enter('helpRequest')

    return
  }

  await ctx.reply(
    '–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç–æ–≥–æ, –∫–æ–º—É –º–æ–∂–Ω–æ –≤—ã—Å–∫–∞–∑–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', 
    responseMenu('–ù–∞—á–∞—Ç—å', 'reqSceneStart')
  )
})
bot.on('callback_query', async ctx => {
  const buttonValue = ctx.callbackQuery.message.reply_markup.inline_keyboard[0][0]?.callback_data

  // –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞
  if (String(ctx.callbackQuery.message.chat.id) === EMPATHY_CHAT_ID) {
    const user = await userQuery.find(ctx.from.id)
    if (!user) {
      await ctx.answerCbQuery(
        '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏ /start –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º –ú–æ—Ç—è üòä',
        true
      )

      return
    }

    const { username } = ctx.from
    let message = ''

    if (!username) {
      await ctx.answerCbQuery(
        '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ –º–æ–≥ —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram –ø–æ–ª–µ username',
        true
      )

      return
    }

    // –≤ buttonValue –ª–µ–∂–∏—Ç id —é–∑–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∑–∞–ø—Ä–æ—Å
    const req = await requestQuery.findUserActiveRequest(Number(buttonValue))

    if (!req) return

    const userAlreadyReplyed = await responseQuery.findUserReply(ctx.from.id, req.id)

    if (userAlreadyReplyed) {
      message = '–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å!'
    } else {
      await ctx.telegram.sendMessage(
        buttonValue, 
        `@${username} –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`, 
        responseMenu('ü§ù –ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å', `helpReqCancel @${username}`)
      )
      await responseQuery.create({
        requestId: req.id,
        responserId: ctx.from.id,
      })
      message = '–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!'
    }

    await ctx.answerCbQuery(message, true)
  } else if (buttonValue.includes('helpReqCancel')) {
    const req = await requestQuery.findUserActiveRequest(ctx.callbackQuery.from.id)
    const additionalInfo = buttonValue.replace('helpReqCancel ', '')
    let status = ''

    if (!req || req.status !== 'active') {
      await ctx.answerCbQuery('–ó–∞–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç üòä', true)
      return
    } else if (additionalInfo.startsWith('@')) {
      await ctx.answerCbQuery(
        `–í—ã –ø—Ä–∏–Ω—è–ª–∏ –æ—Ç–∫–ª–∏–∫ –æ—Ç ${additionalInfo}. –ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É/–µ–π –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.`,
        true
      )
      status = 'closed_by_reply'
    } else {
      status = 'closed_by_author'
      await ctx.answerCbQuery('–ó–∞–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç!', true)
    }

    clearTimeout(ctx.session.reqTimeout)

    await closeRequest(ctx, req, status)
  } else if (buttonValue === 'reqSceneStart') {
    await ctx.answerCbQuery()
    await ctx.scene.enter('helpRequest')
  }
})

async function start() {
  try {
    await bot.launch()
    await requestQuery.activatePendingRequests(bot)
    console.log('The bot was successfully launched')
  } catch (e) {
    console.log('Server Error', e.message)
    process.exit(1)
  }
}

start()
