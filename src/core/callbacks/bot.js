const { EMPATHY_CHAT_ID } = require('../../config')
const { WELCOME_MSG_REPLY } = require('../utils/phrases')
const dmQuery = require('../query_service/default_messages/dm_query')
const userQuery = require('../query_service/users/users_query')
const responseQuery = require('../query_service/responses/responses_query')
const requestQuery = require('../query_service/requests/requests_query')
const redisClient = require('../redis/client')
const { 
  NEW_USER_JOINED_DELAY,
  closeRequest,
  userFullname,
} = require('../utils/helpers') 
const { 
  responseMenu,
  inlineKeyboard,
} = require('../utils/buttons')

const welcomeMessage = async ctx => {
  if (String(ctx.chat.id) === EMPATHY_CHAT_ID) return

  const user = await ctx.telegram.getChatMember(EMPATHY_CHAT_ID, ctx.from.id)
  
  if (user.status === 'creator' || user.status === 'administrator') {
    const text = ctx.message.text.replace('/welcome_msg ', '')

    if (text.startsWith('/welcome_msg')) {
      await ctx.reply(WELCOME_MSG_REPLY)
      
      return
    }

    if (text === 'disable') {
      await dmQuery.updateBy({ type: 'welcome_msg' }, { status: 'disabled' })
      await ctx.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ!')
      
      return
    }

    if (text === 'enable') {
      await dmQuery.updateBy({ type: 'welcome_msg' }, { status: 'active' })
      await ctx.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ!')
      
      return
    }

    await dmQuery.updateBy({ type: 'welcome_msg' }, { text })
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')
  }
}

const ban = async ctx => {
  if (String(ctx.chat.id) !== EMPATHY_CHAT_ID) return
  const user = await ctx.telegram.getChatMember(EMPATHY_CHAT_ID, ctx.from.id)

  if (user.status === 'creator' || user.status === 'administrator') {
    const messageId = ctx.message?.reply_to_message?.message_id
  
    if (messageId) {
      const res = await userQuery.ban(messageId)
  
      if (res) {
        await ctx.telegram.kickChatMember(EMPATHY_CHAT_ID, Number(res.author_id))
        await ctx.telegram.sendMessage(
          EMPATHY_CHAT_ID,
          '–ê–≤—Ç–æ—Ä—É –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–ø—Ä–µ—â—ë–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –ú–æ—Ç—è –∏ —á–∞—Ç—É –≠–º–ø–∞—Ç–∏–∏.', 
          { reply_to_message_id: Number(messageId) }
        )
  
        if (res.status === 'active') {
          await ctx.telegram.editMessageReplyMarkup(EMPATHY_CHAT_ID, Number(messageId))
        }
      }
    }
  }
}

const unban = async ctx => {
  if (String(ctx.chat.id) !== EMPATHY_CHAT_ID) return

  const user = await ctx.telegram.getChatMember(EMPATHY_CHAT_ID, ctx.from.id)

  if (user.status === 'creator' || user.status === 'administrator') {
    const messageId = ctx.message?.reply_to_message?.message_id
  
    if (messageId) {
      const res = await userQuery.unban(messageId)
  
      if (res) {
        await ctx.telegram.unbanChatMember(EMPATHY_CHAT_ID, Number(res.author_id))
        await ctx.telegram.sendMessage(
          EMPATHY_CHAT_ID,
          '–ê–≤—Ç–æ—Ä—É –∑–∞–ø—Ä–æ—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –ú–æ—Ç—è –∏ —á–∞—Ç—É –≠–º–ø–∞—Ç–∏–∏.', 
          { reply_to_message_id: Number(messageId) }
        )
      }
    }
  }
}

const textHandler = async ctx => {
  if (ctx.message.chat.id !== ctx.from.id) return
  
  const activeReq = await requestQuery.findUserActiveRequest(ctx.from.id)

  if (activeReq) {
    await ctx.scene.enter('helpRequest')

    return
  }

  await ctx.reply(
    '–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç–æ–≥–æ, –∫–æ–º—É –º–æ–∂–Ω–æ –≤—ã—Å–∫–∞–∑–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', 
    responseMenu('–ù–∞—á–∞—Ç—å', 'reqSceneStart')
  )
}

const messageHandler = async ctx => {
  if (String(ctx.chat.id) !== EMPATHY_CHAT_ID) return
  
  const newUser = ctx.message?.new_chat_member

  if (newUser) {
    const userDelayActive = await redisClient.getAsync('delay')
    if (userDelayActive) return

    const welcomeMes = await dmQuery.findBy({ type: 'welcome_msg' })
    if (!welcomeMes) return

    const mes = await ctx.telegram.sendMessage(
      EMPATHY_CHAT_ID,
      welcomeMes.text
    )

    redisClient.set('delay', 'true')
    redisClient.expire('delay', (NEW_USER_JOINED_DELAY / 1000))

    setTimeout(async (ctx, mes) => {
      await ctx.telegram.deleteMessage(EMPATHY_CHAT_ID, mes.message_id)
    }, NEW_USER_JOINED_DELAY, ctx, mes)
  }
}

const cbQueryHandler = async ctx => {
  const buttonValue = ctx.callbackQuery.message.reply_markup.inline_keyboard[0][0]?.callback_data

  // –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞
  if (String(ctx.callbackQuery.message.chat.id) === EMPATHY_CHAT_ID) {
    const user = await userQuery.find(ctx.from.id)
    if (!user) {
      await ctx.answerCbQuery(
        '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏ /start –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º –ú–æ—Ç—è üòä',
        true
      )

      return
    }

    const { username } = ctx.from
    let message = ''

    if (!username) {
      await ctx.answerCbQuery(
        '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ –º–æ–≥ —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞—Ç—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram –ø–æ–ª–µ username',
        true
      )

      return
    }

    // –≤ buttonValue –ª–µ–∂–∏—Ç id —é–∑–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∑–∞–ø—Ä–æ—Å
    const req = await requestQuery.findUserActiveRequest(Number(buttonValue))

    if (!req) return

    const userAlreadyReplyed = await responseQuery.findUserReply(ctx.from.id, req.id)

    if (userAlreadyReplyed) {
      message = '–¢—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å!'
    } else {
      await ctx.telegram.sendMessage(
        buttonValue, 
        `@${username} –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è/–æ—Ç–∫–ª–∏–∫–Ω—É–ª–∞—Å—å –Ω–∞ —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ`, 
        responseMenu('ü§ù –ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å', `helpReqCancel userdata: ${userFullname(ctx.from)} @${username}`)
      )
      await responseQuery.create({
        requestId: req.id,
        responserId: ctx.from.id,
      })
      message = '–°–ø–∞—Å–∏–±–æ! –¢–≤–æ–π –æ—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!'
    }

    await ctx.answerCbQuery(message, true)
  } else if (buttonValue.includes('helpReqCancel')) {
    const req = await requestQuery.findUserActiveRequest(ctx.callbackQuery.from.id)
    const additionalInfo = buttonValue.replace('helpReqCancel ', '')
    let status = ''

    if (!req || req.status !== 'active') {
      await ctx.answerCbQuery('–ó–∞–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç üòä', true)
      return
    } else if (additionalInfo.startsWith('userdata:')) {
      await ctx.answerCbQuery()
      const userInfo = additionalInfo.replace('userdata: ', '')

      await ctx.reply(
        `–¢–≤–æ–π –∑–∞–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç. –¢—ã –ø—Ä–∏–Ω—è–ª(–∞) –æ—Ç–∫–ª–∏–∫ –æ—Ç ${userInfo}. –ù–∞–ø–∏—à–∏ –µ–º—É/–µ–π –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`,
        inlineKeyboard('–ù–∞—á–∞—Ç—å')
      )
      status = 'closed_by_reply'
    } else {
      status = 'closed_by_author'
      await ctx.answerCbQuery('–ó–∞–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç!', true)
    }

    clearTimeout(ctx.session.reqTimeout)

    await closeRequest(ctx, req, status)
  } else if (buttonValue === 'reqSceneStart') {
    await ctx.answerCbQuery()
    await ctx.scene.enter('helpRequest')
  }
}

module.exports = {
  welcomeMessage,
  ban,
  unban,
  messageHandler,
  cbQueryHandler,
  textHandler,
}