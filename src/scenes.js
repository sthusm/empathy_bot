const Scene = require('telegraf/scenes/base')
const { EMPATHY_CHAT_ID } = require('./config.js')
const { 
  responseMenu,
  chooseGender,
  selectRequestType,
  selectPrivacy,
} = require('./core/utils/buttons.js')
const userQuery = require('./core/query_service/users/users_query.js')
const requestQuery = require('./core/query_service/requests/requests_query.js')
const { 
  requestTextGenerator,
  convertTime,
  closeRequest,
} = require('./core/utils/helpers.js')
const { 
  ASK_REPLY,
  OFFER_REPLY,
} = require('./core/utils/phrases.js')
class SceneGenerator {
  genHelpRequest () {
    const helpRequest = new Scene('helpRequest')

    helpRequest.enter(async ctx => {
      const req = await requestQuery.findUserActiveRequest(ctx.from.id)
      for (let pror in ctx.session) console.log('pr', pror === '__scenes')
      console.log('rrreeeqqq:', ctx.session)
      if (req || ctx.session.activeRequest) {
        ctx.session.activeRequest = true
        await ctx.scene.leave()
        return
      }
      ctx.session.enterScene = true
  
      const user = await userQuery.find(ctx.from.id)
      if (!user) return

      console.log(ctx.from)

      ctx.session.user = {
        username: ctx.from.username,
        ...user,
      }

      if (!user.gender) {
        ctx.session.genderChoosing = true
        await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –í–∞—à –ø–æ–ª', chooseGender())
      } else {
        await ctx.reply('–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —ç–º–ø–∞—Ç–∏—é –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å?', selectRequestType())
        ctx.session.reqTypeChoosing = true
      }
    })
    helpRequest.hears(['üë¶ –ú—É–∂—á–∏–Ω–∞', 'üë© –ñ–µ–Ω—â–∏–Ω–∞'], async ctx => {
      if (!ctx.session.genderChoosing) return

      let gender
      if (ctx.match === 'üë¶ –ú—É–∂—á–∏–Ω–∞') gender = 'male'
      else gender = 'female'

      await userQuery.update(ctx.session.user.telegramId, { gender })

      ctx.session.user.gender = gender
      await ctx.reply('–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —ç–º–ø–∞—Ç–∏—é –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å?', selectRequestType())
      ctx.session.reqTypeChoosing = true
      delete ctx.session.genderChoosing
    })
    helpRequest.hears(['–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å', '–ó–∞–ø—Ä–æ—Å–∏—Ç—å'], async ctx => {
      if (ctx.session.activeRequest) {
        await ctx.scene.leave()
        return
      }

      if (!ctx.session.reqTypeChoosing) return

      let messageText
      if (ctx.match === '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å') {
        ctx.session.private = false
        ctx.session.reqType = 'offer'
        messageText = OFFER_REPLY
      } else {
        ctx.session.reqType = 'ask'
        messageText = ASK_REPLY
      }
      
      await ctx.reply(messageText, { parse_mode: 'HTML' })
      delete ctx.session.reqTypeChoosing
    })
    helpRequest.hears(['–ê–Ω–æ–Ω–∏–º–Ω–æ', '–ù–µ –∞–Ω–æ–Ω–∏–º–Ω–æ'], async ctx => {
      if (ctx.session.activeRequest) {
        await ctx.scene.leave()
        return
      }

      if (!ctx.session.reqType || !ctx.session.message) return

      ctx.session.private = ctx.match === '–ê–Ω–æ–Ω–∏–º–Ω–æ'
      ctx.session.waitForTime = true

      await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–æ –Ω–µ –±–æ–ª—å—à–µ 60 –º–∏–Ω—É—Ç).')
    })
    helpRequest.hears(/^[-]?\d+$/, async ctx => {
      if (ctx.session.activeRequest) {
        await ctx.scene.leave()
        return
      }

      if (!ctx.session.waitForTime) return

      const duration = Number(ctx.message.text)
      if (duration > 60 || duration < 0) {
        await ctx.reply('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ =)')
        return
      }

      const mes = await ctx.telegram.sendMessage(
        EMPATHY_CHAT_ID,
        requestTextGenerator(ctx.session.message.text, ctx.session),
        responseMenu('üëã –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è', ctx.session.message.chat.id)
      )

      const req = await requestQuery.create({
        messageId: mes.message_id,
        type: ctx.session.reqType,
        authorId: ctx.session.user.telegramId,
        private: ctx.session.private,
        duration,
      })

      ctx.session.reqTimeout = setTimeout(closeRequest, convertTime(duration), ctx, req[0])

      ctx.session.activeRequest = true
      delete ctx.session.waitForTime

      await ctx.scene.leave()
    })
    helpRequest.on('text', async ctx => {
      if (
        !ctx.session.user || 
        !ctx.session.reqType || 
        ctx.session.waitForTime || 
        ctx.session.message
      ) return
  
      const messageText = String(ctx.message.text)

      if (messageText && messageText.length >= 15) {
        ctx.session.message = ctx.message

        if (ctx.session.private === false) {
          ctx.session.waitForTime = true
          await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–æ –Ω–µ –±–æ–ª—å—à–µ 60 –º–∏–Ω—É—Ç).')
        } else {
          await ctx.reply('–ö–∞–∫ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å?', selectPrivacy())
        }
      } else {
        await ctx.reply('–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ö–æ—Ç—è –±—ã 15 —Å–∏–º–≤–æ–ª–æ–≤')
      }
    })
    helpRequest.on('message', async ctx => ctx.reply('–ü–æ–∫–∞ —á—Ç–æ —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç =)'))
    helpRequest.leave(async ctx => {
      if (ctx.session.activeRequest && !ctx.session.enterScene) {
        await ctx.reply(
          '–£ –≤–∞—Å –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç–º–ø–∞—Ç–∏—é. –ó–∞–∫—Ä–æ–π—Ç–µ –µ–≥–æ, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞, –æ—Ç–∫–ª–∏–∫–Ω—É–≤—à–µ–≥–æ—Å—è –Ω–∞ –í–∞—à –∑–∞–ø—Ä–æ—Å.',
          responseMenu('–ó–∞–∫—Ä—ã—Ç—å –∑–∞–ø—Ä–æ—Å', 'helpReqCancel')
        )
      } else {
        await ctx.reply('–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ –∫—Ç–æ-–Ω–∏–±—É–¥—å –æ—Ç–∫–ª–∏–∫–Ω–µ—Ç—Å—è –Ω–∞ –Ω–µ–≥–æ!')
      }
  
      ctx.session.enterScene = false
    })

    return helpRequest
  }
}

module.exports = SceneGenerator
